
-- Sa√≠da esperada:
--Q:2
--R:3
---- The marvelous env Debugger ------ 
--q  :  5
--res  :  3
--quo  :  2
--n  :  13

data Racional{
  numerador :: Int;
  denominador :: Int;
}

data Ponto{
  x :: Float;
  y :: Float;
}

fun(x :: Int){
   x = 3;
   print 95 + x;
}

fun2(x :: Int, y :: Bool) : Int, Int{
   k = 9 + 1;
   return x,2;
}

divMod(n :: Int, q :: Int ) : Int, Int{
    return n / q, n % q;
}

main(){
  
    n = 13;
    q = 5;
    print 'n';
    print ':';
    print n;
    print '\n';
    print 'q';
    print ':';
    print q;
    print '\n';
    --t = new Racional;

    if(4 == 4) 
      print 'F';
    if(n < 6){
      print 'G';
    } else if(q < 7){
      print 'H';
    }
    {-
    -- com problema nos parentesis
    if((q < 7) && (10 < 20)){
      print 'I';
    }
    -}

    -- Testando o tipo array -- Nao funciona
    --point = new Int[2];
    

    -- Testando o tipo read
    {-
    print 'R';
    print 'E';
    print 'A';
    print 'D';
    print '\n';
    read numero2;
    print numero2;
    --print numero2 + 2;  -- nao funciona
    -}

    print '\n';
    print '\n';
    divMod(n,q)< quo,res >; -- Function Call
    print 'Q';
    print ':';
    print quo;
    print '\n';
    
    print 'R';
    print ':';
    print res;
    print '\n';

    --print 'T';
    --print ':';
    --print 4 % 2;
    --print '\n';

    print '\n';
    fun(3);
    print '\n';
    fun2(1, false)<a,b>;
    print a;
    print '\t';
    print '-';
    print '\t';
    print b;
    print '\n';

    print 'K';
    print '\n';
    print divMod(n,q)[1];       -- FunctionReturn
    print '\n';
}
