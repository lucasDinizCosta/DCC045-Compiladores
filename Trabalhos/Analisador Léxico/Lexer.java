// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Lang.jflex

/******************************************************
* Trabalho de Teoria dos Compiladores(DCC045)(2021/1) *
*                                                     *
* Nome: Lucas Diniz da Costa -- Matricula: 201465524C *
******************************************************/


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int MULTI_LINE_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1d00\1\u1e00"+
    "\1\u1f00\1\u2000\2\u2100\1\u2200\7\u2100\1\u2300\1\u2400\1\u2500"+
    "\1\u2100\1\u2600\1\u2700\2\u2100\31\u1100\1\u2800\121\u1100\1\u2900"+
    "\4\u1100\1\u2a00\1\u1100\1\u2b00\1\u2c00\1\u2d00\1\u2e00\1\u2f00"+
    "\1\u3000\53\u1100\1\u3100\10\u3200\31\u2100\1\u1100\1\u3300\1\u3400"+
    "\1\u1100\1\u3500\1\u3600\1\u3700\1\u3800\1\u2100\1\u3900\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u2100\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u2100"+
    "\1\u5000\1\u5100\1\u5200\1\u2100\3\u1100\1\u5300\1\u5400\1\u5500"+
    "\12\u2100\4\u1100\1\u5600\17\u2100\2\u1100\1\u5700\41\u2100\2\u1100"+
    "\1\u5800\1\u5900\2\u2100\1\u5a00\1\u5b00\27\u1100\1\u5c00\2\u1100"+
    "\1\u5d00\45\u2100\1\u1100\1\u5e00\1\u5f00\11\u2100\1\u6000\27\u2100"+
    "\1\u6100\1\u6200\1\u6300\1\u6400\11\u2100\1\u6500\1\u6600\5\u2100"+
    "\1\u6700\1\u6800\4\u2100\1\u6900\2\u2100\1\u6a00\16\u2100\246\u1100"+
    "\1\u6b00\20\u1100\1\u6c00\1\u6d00\25\u1100\1\u6e00\34\u1100\1\u6f00"+
    "\14\u2100\2\u1100\1\u7000\u0e05\u2100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\3\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\0\1\30\1\31\1\32\2\30"+
    "\1\33\2\30\1\34\21\30\1\35\1\36\1\37\1\0"+
    "\1\40\1\0\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\43\1\47\1\50\2\43\1\51\1\43\1\52\1\53"+
    "\1\54\1\43\1\55\1\56\1\57\1\60\1\43\1\61"+
    "\3\43\1\62\1\0\1\63\7\0\1\3\44\0\1\43"+
    "\12\0\1\43\4\0\1\43\5\0\27\30\1\0\7\30"+
    "\30\43\1\0\10\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\2\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\2\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\2\30\1\43\1\30\1\43\1\30\3\43\2\30"+
    "\1\43\1\30\1\43\2\30\1\43\3\30\2\43\4\30"+
    "\1\43\2\30\1\43\3\30\3\43\2\30\1\43\2\30"+
    "\1\43\1\30\1\43\1\30\1\43\2\30\1\43\1\30"+
    "\2\43\1\30\1\43\2\30\1\43\3\30\1\43\1\30"+
    "\1\43\2\30\2\43\1\40\1\30\3\43\4\40\1\30"+
    "\1\40\1\43\1\30\1\40\1\43\1\30\1\40\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\2\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\2\43\1\30\1\40\1\43\1\30\1\43\3\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\7\43\2\30\1\43\2\30\2\43\1\30"+
    "\1\43\4\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\105\43\1\40\44\43\7\40\2\43\4\0"+
    "\14\40\16\0\5\43\7\0\1\40\1\0\1\40\126\0"+
    "\1\64\52\0\1\30\1\43\1\30\1\43\1\40\1\0"+
    "\1\30\1\43\2\0\4\43\1\0\1\30\6\0\1\30"+
    "\1\0\3\30\1\0\1\30\1\0\2\30\1\43\21\30"+
    "\1\0\11\30\43\43\1\30\2\43\3\30\3\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\5\43\1\30"+
    "\1\43\1\0\1\30\1\43\2\30\2\43\63\30\60\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\10\0\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\2\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\2\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\0"+
    "\46\30\2\0\1\40\6\0\51\43\107\0\33\40\4\0"+
    "\4\40\55\0\53\40\25\0\12\22\4\0\2\40\1\0"+
    "\143\40\1\0\1\40\17\0\2\40\7\0\2\40\12\22"+
    "\3\40\2\0\1\40\20\0\1\40\1\0\36\40\35\0"+
    "\131\40\13\0\1\40\16\0\12\22\41\40\11\0\2\40"+
    "\4\0\1\40\5\0\26\40\4\0\1\40\11\0\1\40"+
    "\3\0\1\40\27\0\31\40\7\0\13\40\65\0\25\40"+
    "\1\0\10\40\106\0\66\40\3\0\1\40\22\0\1\40"+
    "\7\0\12\40\4\0\12\22\1\0\20\40\4\0\10\40"+
    "\2\0\2\40\2\0\26\40\1\0\7\40\1\0\1\40"+
    "\3\0\4\40\3\0\1\40\20\0\1\40\15\0\2\40"+
    "\1\0\3\40\4\0\12\22\2\40\12\0\1\40\10\0"+
    "\6\40\4\0\2\40\2\0\26\40\1\0\7\40\1\0"+
    "\2\40\1\0\2\40\1\0\2\40\37\0\4\40\1\0"+
    "\1\40\7\0\12\22\2\0\3\40\20\0\11\40\1\0"+
    "\3\40\1\0\26\40\1\0\7\40\1\0\2\40\1\0"+
    "\5\40\3\0\1\40\22\0\1\40\17\0\2\40\4\0"+
    "\12\22\11\0\1\40\13\0\10\40\2\0\2\40\2\0"+
    "\26\40\1\0\7\40\1\0\2\40\1\0\5\40\3\0"+
    "\1\40\36\0\2\40\1\0\3\40\4\0\12\22\1\0"+
    "\1\40\21\0\1\40\1\0\6\40\3\0\3\40\1\0"+
    "\4\40\3\0\2\40\1\0\1\40\1\0\2\40\3\0"+
    "\2\40\3\0\3\40\3\0\14\40\26\0\1\40\25\0"+
    "\12\22\25\0\10\40\1\0\3\40\1\0\27\40\1\0"+
    "\20\40\3\0\1\40\32\0\3\40\5\0\2\40\4\0"+
    "\12\22\20\0\1\40\4\0\10\40\1\0\3\40\1\0"+
    "\27\40\1\0\12\40\1\0\5\40\3\0\1\40\40\0"+
    "\1\40\1\0\2\40\4\0\12\22\1\0\2\40\22\0"+
    "\10\40\1\0\3\40\1\0\51\40\2\0\1\40\20\0"+
    "\1\40\5\0\3\40\10\0\3\40\4\0\12\22\12\0"+
    "\6\40\5\0\22\40\3\0\30\40\1\0\11\40\1\0"+
    "\1\40\2\0\7\40\37\0\12\22\21\0\60\40\1\0"+
    "\2\40\14\0\7\40\11\0\12\22\47\0\2\40\1\0"+
    "\1\40\1\0\5\40\1\0\30\40\1\0\1\40\1\0"+
    "\12\40\1\0\2\40\11\0\1\40\2\0\5\40\1\0"+
    "\1\40\11\0\12\22\2\0\4\40\40\0\1\40\37\0"+
    "\12\22\26\0\10\40\1\0\44\40\33\0\5\40\163\0"+
    "\53\40\24\0\1\40\12\22\6\0\6\40\4\0\4\40"+
    "\3\0\1\40\3\0\2\40\7\0\3\40\4\0\15\40"+
    "\14\0\1\40\1\0\12\22\6\0\46\30\1\0\1\30"+
    "\5\0\1\30\2\0\53\43\1\0\1\40\3\43\u0149\40"+
    "\1\0\4\40\2\0\7\40\1\0\1\40\1\0\4\40"+
    "\2\0\51\40\1\0\4\40\2\0\41\40\1\0\4\40"+
    "\2\0\7\40\1\0\1\40\1\0\4\40\2\0\17\40"+
    "\1\0\71\40\1\0\4\40\2\0\103\40\45\0\20\40"+
    "\20\0\126\30\2\0\6\43\3\0\u016c\40\2\0\21\40"+
    "\1\0\32\40\5\0\113\40\6\0\10\40\7\0\15\40"+
    "\1\0\4\40\16\0\22\40\16\0\22\40\16\0\15\40"+
    "\1\0\3\40\17\0\64\40\43\0\1\40\4\0\1\40"+
    "\3\0\12\22\46\0\12\22\6\0\131\40\7\0\5\40"+
    "\2\0\42\40\1\0\1\40\5\0\106\40\12\0\37\40"+
    "\47\0\12\22\36\40\2\0\5\40\13\0\54\40\4\0"+
    "\32\40\6\0\12\22\46\0\27\40\11\0\65\40\53\0"+
    "\12\22\6\0\12\22\15\0\1\40\135\0\57\40\21\0"+
    "\7\40\4\0\12\22\51\0\36\40\15\0\2\40\12\22"+
    "\54\40\32\0\44\40\34\0\12\22\3\0\3\40\12\22"+
    "\44\40\2\0\11\43\7\0\53\30\2\0\3\30\51\0"+
    "\4\40\1\0\6\40\1\0\2\40\3\0\1\40\5\0"+
    "\300\43\100\0\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\11\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\11\43\10\30\6\43\2\0\6\30\2\0\10\43"+
    "\10\30\10\43\10\30\6\43\2\0\6\30\2\0\10\43"+
    "\1\0\1\30\1\0\1\30\1\0\1\30\1\0\1\30"+
    "\10\43\10\30\16\43\2\0\10\43\10\40\10\43\10\40"+
    "\10\43\10\40\5\43\1\0\2\43\4\30\1\40\1\0"+
    "\1\43\3\0\3\43\1\0\2\43\4\30\1\40\3\0"+
    "\4\43\2\0\2\43\4\30\4\0\10\43\5\30\5\0"+
    "\3\43\1\0\2\43\4\30\1\40\53\0\2\3\107\0"+
    "\1\43\15\0\1\43\20\0\15\43\145\0\1\30\4\0"+
    "\1\30\2\0\1\43\3\30\2\43\3\30\1\43\1\0"+
    "\1\30\3\0\5\30\6\0\1\30\1\0\1\30\1\0"+
    "\1\30\1\0\4\30\1\0\1\43\4\30\1\43\4\40"+
    "\1\43\2\0\2\43\2\30\5\0\1\30\4\43\4\0"+
    "\1\43\21\0\20\65\20\64\3\0\1\30\1\43\u0231\0"+
    "\32\65\32\64\26\0\57\30\1\0\57\43\1\0\1\30"+
    "\1\43\3\30\2\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\4\30\1\43\1\30\2\43\1\30\10\43\3\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\2\43\6\0\1\30\1\43\1\30\1\43"+
    "\3\0\1\30\1\43\14\0\46\43\1\0\1\43\5\0"+
    "\1\43\2\0\70\40\7\0\1\40\20\0\27\40\11\0"+
    "\7\40\1\0\7\40\1\0\7\40\1\0\7\40\1\0"+
    "\7\40\1\0\7\40\1\0\7\40\1\0\7\40\120\0"+
    "\1\40\325\0\2\40\52\0\5\40\5\0\2\40\4\0"+
    "\126\40\6\0\3\40\1\0\132\40\1\0\4\40\5\0"+
    "\53\40\1\0\136\40\21\0\33\40\65\0\306\40\112\0"+
    "\360\40\20\0\215\40\103\0\56\40\2\0\15\40\3\0"+
    "\20\40\12\22\2\40\24\0\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\40\20\0\1\40\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\3\43\2\0\106\40\61\0\11\40\2\0\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\3\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\30\12\43\1\30\1\43\1\30\1\43\2\30\1\43"+
    "\1\30\1\43\1\30\1\43\1\30\1\43\1\30\1\43"+
    "\1\40\2\0\1\30\1\43\1\30\1\43\1\40\1\30"+
    "\1\43\1\30\3\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\1\30\1\43\5\30"+
    "\1\43\5\30\1\43\1\30\1\43\1\30\1\43\1\30"+
    "\1\43\1\30\1\43\1\30\1\43\2\0\1\30\1\43"+
    "\3\30\60\0\1\40\3\43\7\40\1\0\3\40\1\0"+
    "\4\40\1\0\27\40\35\0\64\40\16\0\62\40\34\0"+
    "\12\22\30\0\6\40\3\0\1\40\1\0\2\40\1\0"+
    "\12\22\34\40\12\0\27\40\31\0\35\40\7\0\57\40"+
    "\34\0\1\40\12\22\6\0\5\40\1\0\12\40\12\22"+
    "\5\40\1\0\51\40\27\0\3\40\1\0\10\40\4\0"+
    "\12\22\6\0\27\40\3\0\1\40\3\0\62\40\1\0"+
    "\1\40\3\0\2\40\2\0\5\40\2\0\1\40\1\0"+
    "\1\40\30\0\3\40\2\0\13\40\7\0\3\40\14\0"+
    "\6\40\2\0\6\40\2\0\6\40\11\0\7\40\1\0"+
    "\7\40\1\0\53\43\1\0\14\43\10\0\120\43\43\40"+
    "\15\0\12\22\6\0\244\40\14\0\27\40\4\0\61\40"+
    "\4\0\u0100\3\156\40\2\0\152\40\46\0\7\43\14\0"+
    "\5\43\5\0\1\40\1\0\12\40\1\0\15\40\1\0"+
    "\5\40\1\0\1\40\1\0\2\40\1\0\2\40\1\0"+
    "\154\40\41\0\153\40\22\0\100\40\2\0\66\40\50\0"+
    "\14\40\164\0\5\40\1\0\207\40\23\0\12\22\7\0"+
    "\32\30\6\0\32\43\13\0\131\40\3\0\6\40\2\0"+
    "\6\40\2\0\6\40\2\0\3\40\43\0\14\40\1\0"+
    "\32\40\1\0\23\40\1\0\2\40\1\0\17\40\2\0"+
    "\16\40\42\0\173\40\205\0\35\40\3\0\61\40\57\0"+
    "\40\40\15\0\24\40\1\0\10\40\6\0\46\40\12\0"+
    "\36\40\2\0\44\40\4\0\10\40\60\0\50\30\50\43"+
    "\116\40\2\0\12\22\6\0\44\30\4\0\44\43\4\0"+
    "\50\40\10\0\64\40\234\0\67\40\11\0\26\40\12\0"+
    "\10\40\230\0\6\40\2\0\1\40\1\0\54\40\1\0"+
    "\2\40\3\0\1\40\2\0\27\40\12\0\27\40\11\0"+
    "\37\40\101\0\23\40\1\0\2\40\12\0\26\40\12\0"+
    "\32\40\106\0\70\40\6\0\2\40\100\0\1\40\17\0"+
    "\4\40\1\0\3\40\1\0\35\40\52\0\35\40\3\0"+
    "\35\40\43\0\10\40\1\0\34\40\33\0\66\40\12\0"+
    "\26\40\12\0\23\40\15\0\22\40\156\0\111\40\67\0"+
    "\63\30\15\0\63\43\15\0\44\40\14\0\12\22\306\0"+
    "\35\40\12\0\1\40\10\0\26\40\232\0\27\40\14\0"+
    "\65\40\56\0\12\22\23\0\55\40\40\0\31\40\7\0"+
    "\12\22\11\0\44\40\17\0\12\22\4\0\1\40\13\0"+
    "\43\40\3\0\1\40\14\0\60\40\16\0\4\40\13\0"+
    "\12\22\1\40\1\0\1\40\43\0\22\40\1\0\31\40"+
    "\124\0\7\40\1\0\1\40\1\0\4\40\1\0\17\40"+
    "\1\0\12\40\7\0\57\40\21\0\12\22\13\0\10\40"+
    "\2\0\2\40\2\0\26\40\1\0\7\40\1\0\2\40"+
    "\1\0\5\40\3\0\1\40\22\0\1\40\14\0\5\40"+
    "\236\0\65\40\22\0\4\40\5\0\12\22\5\0\1\40"+
    "\40\0\60\40\24\0\2\40\1\0\1\40\10\0\12\22"+
    "\246\0\57\40\51\0\4\40\44\0\60\40\24\0\1\40"+
    "\13\0\12\22\46\0\53\40\15\0\1\40\7\0\12\22"+
    "\66\0\33\40\25\0\12\22\306\0\54\40\164\0\40\30"+
    "\40\43\12\22\25\0\1\40\240\0\10\40\2\0\47\40"+
    "\20\0\1\40\1\0\1\40\34\0\1\40\12\0\50\40"+
    "\7\0\1\40\25\0\1\40\13\0\56\40\23\0\1\40"+
    "\42\0\71\40\7\0\11\40\1\0\45\40\21\0\1\40"+
    "\17\0\12\22\30\0\36\40\160\0\7\40\1\0\2\40"+
    "\1\0\46\40\25\0\1\40\11\0\12\22\6\0\6\40"+
    "\1\0\2\40\1\0\40\40\16\0\1\40\7\0\12\22"+
    "\u0136\0\23\40\15\0\232\40\346\0\304\40\274\0\57\40"+
    "\321\0\107\40\271\0\71\40\7\0\37\40\1\0\12\22"+
    "\146\0\36\40\22\0\60\40\20\0\4\40\14\0\12\22"+
    "\11\0\25\40\5\0\23\40\260\0\40\30\40\43\200\0"+
    "\113\40\5\0\1\40\102\0\15\40\100\0\2\40\1\0"+
    "\1\40\34\0\370\40\10\0\363\40\15\0\37\40\61\0"+
    "\3\40\21\0\4\40\10\0\u018c\40\4\0\153\40\5\0"+
    "\15\40\3\0\11\40\7\0\12\40\146\0\32\30\32\43"+
    "\32\30\7\43\1\0\22\43\32\30\32\43\1\30\1\0"+
    "\2\30\2\0\1\30\2\0\2\30\2\0\4\30\1\0"+
    "\10\30\4\43\1\0\1\43\1\0\7\43\1\0\13\43"+
    "\32\30\32\43\2\30\1\0\4\30\2\0\10\30\1\0"+
    "\7\30\1\0\32\43\2\30\1\0\4\30\1\0\5\30"+
    "\1\0\1\30\3\0\7\30\1\0\32\43\32\30\32\43"+
    "\32\30\32\43\32\30\32\43\32\30\32\43\32\30\32\43"+
    "\32\30\34\43\2\0\31\30\1\0\31\43\1\0\6\43"+
    "\31\30\1\0\31\43\1\0\6\43\31\30\1\0\31\43"+
    "\1\0\6\43\31\30\1\0\31\43\1\0\6\43\31\30"+
    "\1\0\31\43\1\0\6\43\1\30\1\43\2\0\62\22"+
    "\55\40\12\0\7\40\2\0\12\22\4\0\1\40\u0171\0"+
    "\54\40\4\0\12\22\6\0\305\40\73\0\42\30\42\43"+
    "\7\0\1\40\4\0\12\22\246\0\4\40\1\0\33\40"+
    "\1\0\2\40\1\0\1\40\2\0\1\40\1\0\12\40"+
    "\1\0\4\40\1\0\1\40\1\0\1\40\6\0\1\40"+
    "\4\0\1\40\1\0\1\40\1\0\1\40\1\0\3\40"+
    "\1\0\2\40\1\0\1\40\2\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\1\40\1\0\2\40"+
    "\1\0\1\40\2\0\4\40\1\0\7\40\1\0\4\40"+
    "\1\0\4\40\1\0\1\40\1\0\12\40\1\0\21\40"+
    "\5\0\3\40\1\0\5\40\1\0\21\40\164\0\32\65"+
    "\6\0\32\65\6\0\32\65\166\0\327\40\51\0\65\40"+
    "\13\0\336\40\2\0\u0182\40\16\0\u0131\40\37\0\36\40"+
    "\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[28928];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\5\26\1\27"+
    "\1\30\1\31\11\32\1\33\1\34\3\1\1\35\1\36"+
    "\2\0\1\37\1\0\1\40\1\41\4\26\3\32\1\42"+
    "\6\32\1\43\1\44\1\45\1\0\3\26\1\46\4\32"+
    "\1\47\5\32\1\50\1\51\1\26\1\52\1\53\2\32"+
    "\1\54\1\32\1\55\1\32\1\56\1\57\1\60\1\32"+
    "\1\61\2\32\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\154\0\242\0\330\0\154\0\u010e"+
    "\0\u0144\0\154\0\154\0\154\0\154\0\154\0\u017a\0\u01b0"+
    "\0\154\0\u01e6\0\u021c\0\154\0\154\0\u0252\0\154\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\154\0\154\0\154\0\u0396"+
    "\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546"+
    "\0\u057c\0\154\0\u05b2\0\u05e8\0\154\0\154\0\154\0\u061e"+
    "\0\u0654\0\u01b0\0\u01b0\0\154\0\154\0\u068a\0\u06c0\0\u06f6"+
    "\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0396\0\u0804\0\u083a\0\u0870"+
    "\0\u08a6\0\u08dc\0\u0912\0\154\0\154\0\154\0\u0948\0\u097e"+
    "\0\u09b4\0\u09ea\0\u0288\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0396"+
    "\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0288\0\u0288\0\u0c06"+
    "\0\u0396\0\u0396\0\u0c3c\0\u0c72\0\u0396\0\u0ca8\0\u0396\0\u0cde"+
    "\0\u0396\0\u0288\0\u0396\0\u0d14\0\u0396\0\u0d4a\0\u0d80\0\u0396"+
    "\0\u0396";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\3"+
    "\3\40\1\41\1\42\1\43\1\40\1\44\1\40\1\45"+
    "\1\40\1\46\1\47\1\40\1\50\2\40\1\51\1\52"+
    "\1\40\1\30\17\53\1\54\43\53\1\55\2\53\70\0"+
    "\1\4\111\0\1\56\47\0\1\57\113\0\1\60\46\0"+
    "\1\61\70\0\1\62\63\0\1\63\1\0\1\22\66\0"+
    "\1\64\70\0\1\65\61\0\1\30\5\0\5\30\3\0"+
    "\22\30\26\0\1\30\5\0\5\30\3\0\13\30\1\66"+
    "\6\30\26\0\1\30\5\0\5\30\3\0\7\30\1\67"+
    "\12\30\26\0\1\30\5\0\5\30\3\0\11\30\1\70"+
    "\10\30\26\0\1\30\5\0\5\30\3\0\12\30\1\71"+
    "\7\30\26\0\1\40\5\0\5\40\3\0\22\40\26\0"+
    "\1\40\5\0\5\40\3\0\1\40\1\72\20\40\26\0"+
    "\1\40\5\0\5\40\3\0\11\40\1\73\10\40\26\0"+
    "\1\40\5\0\5\40\3\0\1\40\1\74\20\40\26\0"+
    "\1\40\5\0\5\40\3\0\6\40\1\75\10\40\1\76"+
    "\2\40\26\0\1\40\5\0\5\40\3\0\5\40\1\77"+
    "\12\40\1\100\1\40\26\0\1\40\5\0\5\40\3\0"+
    "\15\40\1\101\4\40\26\0\1\40\5\0\5\40\3\0"+
    "\5\40\1\102\14\40\26\0\1\40\5\0\5\40\3\0"+
    "\15\40\1\103\4\40\23\0\1\104\46\0\17\53\1\0"+
    "\43\53\1\0\2\53\63\0\1\105\13\0\1\106\24\0"+
    "\1\107\3\0\1\107\7\0\1\107\2\0\1\107\1\0"+
    "\1\107\6\0\2\61\1\4\2\0\1\5\60\61\22\0"+
    "\1\30\5\0\5\30\3\0\13\30\1\110\6\30\26\0"+
    "\1\30\5\0\5\30\3\0\1\30\1\111\20\30\26\0"+
    "\1\30\5\0\5\30\3\0\13\30\1\112\6\30\26\0"+
    "\1\30\5\0\5\30\3\0\17\30\1\113\2\30\26\0"+
    "\1\40\5\0\5\40\3\0\17\40\1\114\2\40\26\0"+
    "\1\40\5\0\5\40\3\0\16\40\1\115\3\40\26\0"+
    "\1\40\5\0\5\40\3\0\11\40\1\116\10\40\26\0"+
    "\1\40\5\0\5\40\3\0\5\40\1\117\14\40\26\0"+
    "\1\40\5\0\5\40\3\0\21\40\1\120\26\0\1\40"+
    "\5\0\5\40\3\0\11\40\1\121\10\40\26\0\1\40"+
    "\5\0\5\40\3\0\10\40\1\122\11\40\26\0\1\40"+
    "\5\0\5\40\3\0\1\40\1\123\15\40\1\124\2\40"+
    "\26\0\1\40\5\0\5\40\3\0\20\40\1\125\1\40"+
    "\15\0\1\106\76\0\1\30\5\0\5\30\3\0\11\30"+
    "\1\126\10\30\26\0\1\30\5\0\5\30\3\0\15\30"+
    "\1\127\4\30\26\0\1\30\5\0\5\30\3\0\1\30"+
    "\1\130\20\30\26\0\1\40\5\0\5\40\3\0\1\40"+
    "\1\131\20\40\26\0\1\40\5\0\5\40\3\0\5\40"+
    "\1\132\14\40\26\0\1\40\5\0\5\40\3\0\16\40"+
    "\1\133\3\40\26\0\1\40\5\0\5\40\3\0\15\40"+
    "\1\134\4\40\26\0\1\40\5\0\5\40\3\0\11\40"+
    "\1\135\10\40\26\0\1\40\5\0\5\40\3\0\12\40"+
    "\1\136\7\40\26\0\1\40\5\0\5\40\3\0\4\40"+
    "\1\137\15\40\26\0\1\40\5\0\5\40\3\0\20\40"+
    "\1\140\1\40\26\0\1\40\5\0\5\40\3\0\5\40"+
    "\1\141\14\40\26\0\1\30\5\0\5\30\3\0\17\30"+
    "\1\142\2\30\26\0\1\40\5\0\5\40\3\0\5\40"+
    "\1\143\14\40\26\0\1\40\5\0\5\40\3\0\1\40"+
    "\1\144\20\40\26\0\1\40\5\0\5\40\3\0\17\40"+
    "\1\145\2\40\26\0\1\40\5\0\5\40\3\0\15\40"+
    "\1\146\4\40\26\0\1\40\5\0\5\40\3\0\17\40"+
    "\1\147\2\40\26\0\1\40\5\0\5\40\3\0\12\40"+
    "\1\150\7\40\26\0\1\40\5\0\5\40\3\0\5\40"+
    "\1\151\14\40\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3510];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\11\2\1\1\11\2\1\5\11\2\1"+
    "\1\11\2\1\2\11\1\1\1\11\5\1\3\11\12\1"+
    "\1\11\2\1\3\11\2\0\1\1\1\0\2\11\16\1"+
    "\3\11\1\0\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    
	private int ntk;	// Servirá pra contar o número de tokens

	public int readedTokens(){	// Número de tokens lidos até o momento
		return ntk;
	}
	// Symbol: Servem para construir um token e retornar um token na entrada
	private Token symbol(TOKEN_TYPE t){	
		ntk++;
		return new Token(t, yytext(), yyline+1, yycolumn+1); // yytext() é o lexema
	}
  // Cria um token com um valor determinado
	private Token symbol(TOKEN_TYPE t, Object value){
		ntk++;
		return new Token(t, value, yyline+1, yycolumn+1);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
  	ntk = 0;
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Nao faz nada, cotinua no comentario*/
            }
            // fall through
          case 52: break;
          case 2:
            { throw new RuntimeException("Illegal character <"+yytext()+">");
            }
            // fall through
          case 53: break;
          case 3:
            { /* Não faz nada  */
            }
            // fall through
          case 54: break;
          case 4:
            { return symbol(TOKEN_TYPE.EXCLAMATION);
            }
            // fall through
          case 55: break;
          case 5:
            { return symbol(TOKEN_TYPE.PERCENT);
            }
            // fall through
          case 56: break;
          case 6:
            { return symbol(TOKEN_TYPE.AMPERSAND);
            }
            // fall through
          case 57: break;
          case 7:
            { return symbol(TOKEN_TYPE.SINGLE_QUOTES);
            }
            // fall through
          case 58: break;
          case 8:
            { return symbol(TOKEN_TYPE.OPEN_PARENT);
            }
            // fall through
          case 59: break;
          case 9:
            { return symbol(TOKEN_TYPE.CLOSE_PARENT);
            }
            // fall through
          case 60: break;
          case 10:
            { return symbol(TOKEN_TYPE.TIMES);
            }
            // fall through
          case 61: break;
          case 11:
            { return symbol(TOKEN_TYPE.PLUS);
            }
            // fall through
          case 62: break;
          case 12:
            { return symbol(TOKEN_TYPE.COMMA);
            }
            // fall through
          case 63: break;
          case 13:
            { return symbol(TOKEN_TYPE.MINUS);
            }
            // fall through
          case 64: break;
          case 14:
            { return symbol(TOKEN_TYPE.DOT);
            }
            // fall through
          case 65: break;
          case 15:
            { return symbol(TOKEN_TYPE.SLASH);
            }
            // fall through
          case 66: break;
          case 16:
            { return symbol(TOKEN_TYPE.VALUE_INT, Integer.parseInt(yytext()) );
            }
            // fall through
          case 67: break;
          case 17:
            { return symbol(TOKEN_TYPE.COLON);
            }
            // fall through
          case 68: break;
          case 18:
            { return symbol(TOKEN_TYPE.SEMI);
            }
            // fall through
          case 69: break;
          case 19:
            { return symbol(TOKEN_TYPE.LESS_THAN);
            }
            // fall through
          case 70: break;
          case 20:
            { return symbol(TOKEN_TYPE.EQUALS);
            }
            // fall through
          case 71: break;
          case 21:
            { return symbol(TOKEN_TYPE.GREATER_THAN);
            }
            // fall through
          case 72: break;
          case 22:
            { return symbol(TOKEN_TYPE.NAME_TYPE);
            }
            // fall through
          case 73: break;
          case 23:
            { return symbol(TOKEN_TYPE.OPEN_BRACKET);
            }
            // fall through
          case 74: break;
          case 24:
            { return symbol(TOKEN_TYPE.BACK_SLASH);
            }
            // fall through
          case 75: break;
          case 25:
            { return symbol(TOKEN_TYPE.CLOSE_BRACKET);
            }
            // fall through
          case 76: break;
          case 26:
            { return symbol(TOKEN_TYPE.ID);
            }
            // fall through
          case 77: break;
          case 27:
            { return symbol(TOKEN_TYPE.OPEN_BRACES);
            }
            // fall through
          case 78: break;
          case 28:
            { return symbol(TOKEN_TYPE.CLOSE_BRACES);
            }
            // fall through
          case 79: break;
          case 29:
            { return symbol(TOKEN_TYPE.DIFFERENCE);
            }
            // fall through
          case 80: break;
          case 30:
            { return symbol(TOKEN_TYPE.AND);
            }
            // fall through
          case 81: break;
          case 31:
            { return symbol(TOKEN_TYPE.VALUE_FLOAT, Float.parseFloat(yytext()) );
            }
            // fall through
          case 82: break;
          case 32:
            { return symbol(TOKEN_TYPE.DOUBLE_COLON);
            }
            // fall through
          case 83: break;
          case 33:
            { return symbol(TOKEN_TYPE.EQUALITY);
            }
            // fall through
          case 84: break;
          case 34:
            { return symbol(TOKEN_TYPE.IF);
            }
            // fall through
          case 85: break;
          case 35:
            { yybegin(MULTI_LINE_COMMENT);
            }
            // fall through
          case 86: break;
          case 36:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 87: break;
          case 37:
            { return symbol(TOKEN_TYPE.VALUE_CHAR);
            }
            // fall through
          case 88: break;
          case 38:
            { return symbol(TOKEN_TYPE.INT);
            }
            // fall through
          case 89: break;
          case 39:
            { return symbol(TOKEN_TYPE.NEW);
            }
            // fall through
          case 90: break;
          case 40:
            { return symbol(TOKEN_TYPE.BOOL);
            }
            // fall through
          case 91: break;
          case 41:
            { return symbol(TOKEN_TYPE.CHAR);
            }
            // fall through
          case 92: break;
          case 42:
            { return symbol(TOKEN_TYPE.DATA);
            }
            // fall through
          case 93: break;
          case 43:
            { return symbol(TOKEN_TYPE.ELSE);
            }
            // fall through
          case 94: break;
          case 44:
            { return symbol(TOKEN_TYPE.NULL);
            }
            // fall through
          case 95: break;
          case 45:
            { return symbol(TOKEN_TYPE.READ);
            }
            // fall through
          case 96: break;
          case 46:
            { return symbol(TOKEN_TYPE.TRUE);
            }
            // fall through
          case 97: break;
          case 47:
            { return symbol(TOKEN_TYPE.FLOAT);
            }
            // fall through
          case 98: break;
          case 48:
            { return symbol(TOKEN_TYPE.FALSE);
            }
            // fall through
          case 99: break;
          case 49:
            { return symbol(TOKEN_TYPE.PRINT);
            }
            // fall through
          case 100: break;
          case 50:
            { return symbol(TOKEN_TYPE.RETURN);
            }
            // fall through
          case 101: break;
          case 51:
            { return symbol(TOKEN_TYPE.ITERATE);
            }
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
